// 复合类型

/*
上一节讲到，变量定义的基本形式是：

类型说明符
一个或多个变量名组成的列表（以逗号分隔）
分号结束
其实还有一种更通用的说法：

类型说明符
一个或多个声明符组成的列表（以逗号分隔）
分号结束
对于基本类型来说，声明符指的就是变量名
对于复合类型来说，声明符指的是特殊符号+变量名
*/

    // 定义一个引用类型的变量：
    // int ival = 1024;
    // int &refVal = ival;

    // 定义一个指针类型的变量：
    // int ival = 1024;
    // int *p = &ival;

/*
引用
区别于普通类型的变量，引用有以下几个特点：

引用只是别名，定义引用时，程序把引用和它的初始值绑定在一起
引用本身不是对象，编译器不会为引用分配内存空间，它只是一个别名
牢记以上两点就很容易理解引用了：

引用必须初始化（定义时要执行绑定的过程）
对引用进行操作，实际是在操作引用绑定的对象（引用只是别名）
*/

/*
指针
和引用一样，指针也能实现对其他对象的间接访问。

指针和引用的最大区别就是，指针本身是一个对象
指针和普通变量的最大区别是，指针存放的是其他对象的地址
*/

    // 前面我们用&操作符进行引用的定义，它同时也是取地址符
    // int ival = 1024;
    // int *p = &ival;
    // &操作符取出变量ival的地址赋值给指针p
    // 同样的，*操作符也具备两重身份，它同时也是解引用符
    // int i2 = *p;
    // 对指针p解引用得到它所指的对象ival，然后ival的值用于初始化新定义的整型变量i2

#include <iostream>

int main(int argc, char const *argv[]) {
    int ival = 1024;
    int *p = &ival;
    int i2 = *p;
    std::cout << "i2 = " << i2 << std::endl;
    return 0;
}
